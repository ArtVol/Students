1. Реализовать структуру данных "интрузивный список" (clist).

2. Реализовать программу, которая ведет учет 2D точек, предоставленных пользователем. Для этого потребуется:
* на базе функций интрузивного списка реализовать работу со списком точек;
* реализовать CLI (command line interface) для работы со списком точек.

2.1. Для реализации списка точек может быть полезен следующий макрос:

#define container_of(ptr, type, member) (type*)((char*)(ptr) - offsetof(type, member))

= Пример использования =

struct intrusive_node *ptr, *head = &(list->head);
struct position_node *item;

item = container_of(ptr, position_node, node);

Макрос, как следует из названия, позволяет получить структуру, внутри которой хранится элемент списка.

2.2. Формат команд и вывода CLI:
* add <x> <y> -- сохранить точку (x, y) [в начале списка];
* rm <x> <y> -- удалить все точки (x, y);
* print -- печать в терминале всех точек, которые хранятся в данный момент, в скобках через пробел. Вывод заканчивается переводом строки;
* rma -- удаление всех точек
* len -- печать количества хранимых точек
* exit -- выход из программы
* если вводится любая другая команда -- печать сообщения "Unknown command"

= Пример =
add 1 2[Enter]
add 3 6[Enter]
add 4 6[Enter]
len[Enter]
3
add 1 2[Enter]
print[Enter]
(1 2) (4 6) (3 6) (1 2)
sort[Enter]
Unknown command
rm 1 2 [Enter]
print[Enter]
(4 6) (3 6)
rma[Enter]
print[Enter]
<empty line>
len[Enter]
0
add 2 -4[Enter]
print[Enter]
(2 -4)

3. Собираться приложение должно при помощи команды make. Имя выходного файла: pose_db. Структура проекта такая же, как в предыдущих заданиях.

4. В приложении не должно быть утечек памяти.

5. При завершении работы программа должна освобождать всю динамически выделенную память.